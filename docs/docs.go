// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/batch-jobs": {
            "get": {
                "description": "Retrieve a list of all batch jobs, optionally filtered by status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch Jobs"
                ],
                "summary": "List all batch jobs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter jobs by status (e.g., pending, completed, failed)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of batch jobs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cache.BatchJob"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Schedule a new batch job for historical data recording.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "batch-jobs"
                ],
                "summary": "Create a new batch job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time in Unix epoch seconds",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time in Unix epoch seconds",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/cache.BatchJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/batch-jobs/{id}": {
            "get": {
                "description": "Retrieve the status and details of a specific batch job using its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch Jobs"
                ],
                "summary": "Get a specific batch job by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch Job ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch job details",
                        "schema": {
                            "$ref": "#/definitions/cache.BatchJob"
                        }
                    },
                    "400": {
                        "description": "Invalid Batch Job ID",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Batch Job Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Retrieve a list of transactions that occurred between the specified start and end Unix epoch timestamps.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transactions within a timestamp range",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start timestamp in Unix epoch seconds",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End timestamp in Unix epoch seconds",
                        "name": "end",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TransactionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/latest": {
            "get": {
                "description": "Retrieve the latest transactions with an optional limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get latest transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of transactions to retrieve",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TransactionResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/{hash}": {
            "get": {
                "description": "Retrieve a specific transaction using its hash.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction by hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "api.TransactionResponse": {
            "type": "object",
            "properties": {
                "block_number": {
                    "description": "The block number where the transaction was included",
                    "type": "integer"
                },
                "eth_usdt_price": {
                    "description": "The Ether to USDT price at the time of the transaction",
                    "type": "number"
                },
                "gas_price_wei": {
                    "description": "The gas price in Wei",
                    "type": "integer"
                },
                "gas_used": {
                    "description": "The amount of gas used by the transaction",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The timestamp of the transaction (Unix epoch time in seconds)",
                    "type": "integer"
                },
                "transaction_fee_eth": {
                    "description": "The transaction fee in Ether",
                    "type": "number"
                },
                "transaction_fee_usdt": {
                    "description": "The transaction fee in USDT",
                    "type": "number"
                },
                "transaction_hash": {
                    "description": "The hash of the transaction",
                    "type": "string"
                }
            }
        },
        "cache.BatchJob": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Creation timestamp",
                    "type": "integer"
                },
                "end_time": {
                    "description": "End time for the batch job (Unix epoch seconds)",
                    "type": "integer"
                },
                "id": {
                    "description": "Unique identifier for the batch job",
                    "type": "string"
                },
                "result": {
                    "description": "Result of the batch job",
                    "type": "string"
                },
                "start_time": {
                    "description": "Start time for the batch job (Unix epoch seconds)",
                    "type": "integer"
                },
                "status": {
                    "description": "Current status of the job (e.g., pending, completed, failed)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Last update timestamp",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
